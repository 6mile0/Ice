@model Ice.Areas.Admin.ViewModels.Ticket.UpdateTicketViewModel
@{
    ViewData["Title"] = "チケット編集 | ice";
}
@addTagHelper *, Vereyon.Web.FlashMessage

<div class="container mt-4">
    <h1 class="mb-4">チケット編集</h1>
    <flash dismissable="true" />

    <form method="post" asp-action="Edit" asp-route-id="@Model.TicketId">
        <div class="mb-3">
            <label asp-for="Title" class="form-label">タイトル</label>
            <input asp-for="Title" type="text" class="form-control" required maxlength="200"/>
            <span asp-validation-for="Title" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="Status" class="form-label">ステータス</label>
            <input asp-for="Status" type="hidden" required/>
            <div class="d-flex gap-2 flex-wrap">
                @if (Model.Status != Ice.Enums.TicketStatus.InProgress)
                {
                    <button type="button" class="status-badge badge"
                            data-status="@((int)Ice.Enums.TicketStatus.InProgress)" data-color="warning"
                            style="font-size: 1rem; padding: 0.5rem 1rem; cursor: pointer; border: 2px solid #ffc107; background-color: rgba(255, 193, 7, 0.2); color: #000;">
                        対応中
                    </button>
                }
                @if (Model.Status != Ice.Enums.TicketStatus.Resolved)
                {
                    <button type="button" class="status-badge badge"
                            data-status="@((int)Ice.Enums.TicketStatus.Resolved)" data-color="success"
                            style="font-size: 1rem; padding: 0.5rem 1rem; cursor: pointer; border: 2px solid #198754; background-color: rgba(25, 135, 84, 0.2); color: #000;">
                        解決済み
                    </button>
                }
                @if (Model.Status != Ice.Enums.TicketStatus.Pending)
                {
                    <button type="button" class="status-badge badge"
                            data-status="@((int)Ice.Enums.TicketStatus.Pending)" data-color="danger"
                            style="font-size: 1rem; padding: 0.5rem 1rem; cursor: pointer; border: 2px solid #dc3545; background-color: rgba(220, 53, 69, 0.2); color: #000;">
                        トラブルなどで保留中
                    </button>
                }
            </div>
            <span asp-validation-for="Status" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="Remark" class="form-label">メモ欄</label>
            <textarea asp-for="Remark" class="form-control" rows="8" maxlength="2000"></textarea>
            <span asp-validation-for="Remark" class="text-danger"></span>
        </div>

        <div class="d-flex gap-2">
            <button type="submit" class="btn btn-primary">更新</button>
            <a asp-action="Detail" asp-route-id="@Model.TicketId" class="btn btn-secondary">キャンセル</a>
        </div>
    </form>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const statusInput = document.querySelector('input[name="Status"]');
        const statusBadges = document.querySelectorAll('.status-badge');

        const colorMap = {
            'warning': {bg: '#ffc107', bgLight: 'rgba(255, 193, 7, 0.2)', text: '#000', textLight: '#000'},
            'success': {bg: '#198754', bgLight: 'rgba(25, 135, 84, 0.2)', text: '#fff', textLight: '#000'},
            'danger': {bg: '#dc3545', bgLight: 'rgba(220, 53, 69, 0.2)', text: '#fff', textLight: '#000'}
        };

        // バッジクリック時の処理
        statusBadges.forEach(badge => {
            badge.addEventListener('click', (e) => {
                e.preventDefault();

                // すべてのバッジを薄い色に戻す
                statusBadges.forEach(b => {
                    const color = colorMap[b.dataset.color];
                    b.style.backgroundColor = color.bgLight;
                    b.style.color = color.textLight;
                    b.style.fontWeight = 'normal';
                });

                // クリックされたバッジを選択状態に
                const color = colorMap[badge.dataset.color];
                badge.style.backgroundColor = color.bg;
                badge.style.color = color.text;
                badge.style.fontWeight = 'bold';

                // hiddenフィールドに値を設定
                statusInput.value = badge.dataset.status;
            });
        });
    });
</script>

@section Scripts {
    <partial name="_ValidationScriptsPartial"/>
}